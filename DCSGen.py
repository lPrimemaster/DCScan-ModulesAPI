import pprint
import os
import fnmatch
from pathlib import Path

pp = pprint.PrettyPrinter(indent=0)

curr_dir = os.getcwd()

filenames = []
for root, dirs, files in os.walk(curr_dir):
     for file in files:
     	if fnmatch.fnmatch(file, '*.h') and ('install' or 'build') not in root:
     		filenames.append(os.path.join(root, file))

print('Processing files...')
pp.pprint(filenames)
print('\n\n')

# TODO : Make this token an argument
token = 'DCS_REGISTER_CALL'

# TODO : Document (remember default parameters cannot be used [value must be passed via args])

func = []
header_def = []
args_name = []

for fnm in filenames:
	lst = []
	with open(fnm, 'r') as f:
		lst = f.readlines()

	nlst = []
	p = ''

	# Clean file up
	# Remove comments and includes
	for v in lst:
		ns = v.lstrip().replace('\n', '')

		if not ns:
			continue

		if(ns.startswith('/*') or ns.startswith('*') or ns.startswith('//') or ns.startswith('#')):
			continue

		if(not ns.endswith(';') and not (ns.endswith('}') or ns.endswith('{'))):
			p += (' ' + ns)
			continue

		nlst.append((p + ' ' + ns).lstrip(' '))
		p = ''

	f_prefix = []
	oc = {}
	scope = ''
	for v in nlst:
		if (v.startswith('namespace') or
		 v.startswith('class') or
		 v.startswith('struct')):
			scope = v.split(' ')[1]
			f_prefix.append(scope)
			oc[scope] = 1
		elif scope:
			if ('{' in v):
				oc[scope] += 1
			elif ('}' in v):
				oc[scope] -= 1

			if (oc[scope] == 0 and len(f_prefix) > 0):
				f_prefix.pop()
				if(len(f_prefix) > 0):
					scope = f_prefix[-1]

		if v.startswith(token):
			# Get function name with scope
			func.append('::'.join(f_prefix) + '::' + v.split('(', 1)[0].split(' ')[-1])

			# Get function arguments name
			args_name.append([' '.join(x.split(' ')[:-1]) for x in [y.strip() for y in v.split('(', 1)[-1].split(',')]])

			# Get function header dep
			header_def.append(fnm)


print('Processing functions:')
pp.pprint(func)
pp.pprint(args_name)
pp.pprint(header_def)

HEADER = '''
////////////////////////////////////////
//    THIS FILE WAS AUTOGENERATED     //
//  ANY MODIFICATIONS WILL BE ERASED  //
////////////////////////////////////////
// Generated by the DCS pre-processor //
////////////////////////////////////////
'''
DEC = '''
#pragma once
#include "exports.h"
#include <unordered_map>
#include <functional>
#include <any>
#include "../DCS_Utils/include/DCS_ModuleUtils.h"

$0

$1

#define SV_ARG_int8   0x0
#define SV_ARG_float  0x1
#define SV_ARG_bool   0x2
#define SV_ARG_char   0x3
#define SV_ARG_double 0x4

namespace DCS {

	/**
	 * \\brief Class responsible for registering any function calls that might be
	 * requested via tcp/ip. This hash table is auto generated via the ''' + token + ''' token.
	 * Any function declarated with it shall be registered in the hash table and called with
	 * Registry::Execute*() functions.
	 *
	 */
	class Registry {
	public:
		struct SVParams;

		static const u16 Get(const char* func_signature)
		{
			u16 val = -1;
			auto it = id.find(func_signature);
			if (it != id.end())
				val = it->second;
			else
				DCS::Utils::Logger::Error("Function signature (%s) not found.", func_signature);
			return val;
		}

		static DCS_API void Execute(SVParams params);

		static DCS_API const SVParams GetParamsFromData(const unsigned char* payload, i16 size);
	private:
		template<typename T>
		static inline T convert_from_byte(const unsigned char* data, i16 offset, i16 size)
		{
			if(offset >= size)
			{
				DCS::Utils::Logger::Error("Data conversion overflow.");
				return T();
			}

			return *((T*)(data + offset));
		}

		inline static std::unordered_map<const char*,u16> id = 
		{
			$2
		};

	public:
		struct DCS_API SVParams
		{
		public:
			friend class Registry;

			const i8 getOpcode() const
			{
				return opcode;
			}

			const i16 getFunccode() const
			{
				return fcode;
			}

			template<typename T>
			const T getArg(i32 i) const
			{
				return std::any_cast<T>(args.at(i));
			}

		private:
			SVParams(i8 oc, i16 fc, std::vector<std::any> args) : opcode(oc), fcode(fc), args(args) {  }

		private:

			i8 opcode;
			i16 fcode;
#pragma warning( push )
#pragma warning( disable : 4251 )
			std::vector<std::any> args;
#pragma warning( pop )
		};
	};
}
'''

DEF = '''
////////////////////////////////////////
//    THIS FILE WAS AUTOGENERATED     //
//  ANY MODIFICATIONS WILL BE ERASED  //
////////////////////////////////////////
// Generated by the DCS pre-processor //
////////////////////////////////////////

#include "registry.h"

const DCS::Registry::SVParams DCS::Registry::GetParamsFromData(const unsigned char* payload, i16 size)
{
	i8  op_code   = convert_from_byte<i8>(payload, 0, size);  // First byte
	i16 func_code = convert_from_byte<i16>(payload, 1, size); // Second byte
	std::vector<std::any> args;

	// 0000 0000 | 0000 0000 0000 0000 | 0000 0000 ...
	// 0		   1		 2			 3         ...
	// (Opcode )   (     FuncCode    )   (   Args  ...

	// Evaluate arguments
	for(i16 it = 3; it < size;)
	{
		i8 arg_type = convert_from_byte<i8>(payload, it++, size);

		// TODO : Auto generate for any argument
		switch(arg_type)
		{
		case SV_ARG_int8:
			args.push_back(convert_from_byte<i8>(payload, it, size));
			it += sizeof(i8);
			break;
		case SV_ARG_float:
			break;
		case SV_ARG_bool:
			break;
		case SV_ARG_char:
			break;
		case SV_ARG_double:
			break;
		}
	}
	return DCS::Registry::SVParams(op_code, func_code, args);
}

// TODO : error directive if parameter is not registered via token 
void DCS::Registry::Execute(DCS::Registry::SVParams params)
{
	switch(params.getFunccode())
	{
	$0
	default:
		DCS::Utils::Logger::Error("Function call id (%d) not found.", params.getFunccode());
		break;
	}
}

'''

switch = []

with open(curr_dir + '/config/registry.h', 'w') as f:
	f.write(HEADER)

	hdef = []
	defines = []
	
	registry = []
	number = 0

	for hd in header_def:
		hdef.append('#include "' + hd + '"')

	for sig in func:
		definition = 'SV_CALL_' + sig.replace('::', '_')
		defines.append('#define ' + definition + ' ' + hex(number))

		fargs_casted = []
		anumber = 0
		for a in args_name[number]:
			fargs_casted.append('params.getArg<' + a + '>(' + str(anumber) + ')')
			anumber += 1

		switch.append('case ' + definition + ':\n\t\t' + 
			sig + '(' + ',\n\t\t\t'.join(fargs_casted) + ');\n\t\tbreak;' )
		registry.append('{"' + sig + '", ' + hex(number) + '}')
		number += 1

	DEC = DEC.replace('$0', '\n'.join(hdef))
	DEC = DEC.replace('$1', '\n'.join(defines))
	DEC = DEC.replace('$2', ',\n\t\t\t'.join(registry))

	f.write(DEC)

with open(curr_dir + '/config/registry.cpp', 'w') as f:

	DEF = DEF.replace('$0', '\n\t\t\t'.join(switch))

	f.write(DEF)
