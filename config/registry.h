////////////////////////////////////////
//    THIS FILE WAS AUTOGENERATED     //
//  ANY MODIFICATIONS WILL BE ERASED  //
////////////////////////////////////////
// Generated by the DCS pre-processor //
////////////////////////////////////////

#pragma once
#include "exports.h"
#include <unordered_map>
#include <functional>
#include <any>
#include "../DCS_Utils/include/DCS_ModuleUtils.h"

#include "H:\Data\C++\DCScan-ModulesAPI\DCS_Core\include\DCS_ModuleCore.h"

#define SV_CALL_NULL 0x0
#define SV_CALL_DCS_Threading_GetMaxHardwareConcurrency 0x1

#define SV_ARG_NULL 0x0


namespace DCS {

	/**
	 * \brief Autogenerated class responsible for registering any function calls that might be
	 * requested via tcp/ip. 
	 *
	 * An hash table is auto generated via the DCS_REGISTER_CALL token.
	 * Any function declarated with it shall be registered in the hash table and attributed an id callable
	 * via the Registry::Execute*() function family.
	 *
	 */
	class Registry {
	public:
		struct SVParams;
		struct SVReturn;

		static const u16 Get(const char* func_signature)
		{
			u16 val = 0;
			auto it = id.find(func_signature);
			if (it != id.end())
				val = it->second;
			else
				LOG_ERROR("Function signature (%s) not found.", func_signature);
			return val;
		}

		static DCS_API SVReturn Execute(SVParams params);

		static DCS_API const SVParams GetParamsFromData(const unsigned char* payload, i32 size);
	private:
		template<typename T>
		static inline T convert_from_byte(const unsigned char* data, i32 offset, i32 size)
		{
			if(offset >= size)
			{
				LOG_ERROR("Data conversion overflow.");
				return T();
			}

			return *((T*)(data + offset));
		}

		inline static std::unordered_map<const char*, u16> id = 
		{
			{"DCS::Threading::GetMaxHardwareConcurrency", 0x1}
		};

	public:
		struct DCS_API SVParams
		{
		public:
			friend class Registry;

			const u8 getOpcode() const
			{
				return opcode;
			}

			const u16 getFunccode() const
			{
				return fcode;
			}

			template<typename T>
			const T getArg(u64 i) const
			{
				T rv;
				try 
				{
				    rv = std::any_cast<T>(args.at(i));
				}
				catch(const std::bad_any_cast& e) 
				{
					LOG_ERROR("Bad SVParams getArg(%d) %s.", i, e.what());
				}
				return rv;
			}

		private:
			SVParams(u8 oc, u16 fc, std::vector<std::any> args) : opcode(oc), fcode(fc), args(args) {  }

		private:

			u8 opcode;
			u16 fcode;
#pragma warning( push )
#pragma warning( disable : 4251 )
			std::vector<std::any> args;
#pragma warning( pop )
		};

		struct DCS_API SVReturn
		{
		public:
			friend class Registry;

			template<typename T>
			T cast() const
			{
				T rv;
				try 
				{
				    rv = std::any_cast<T>(value);
				}
				catch(const std::bad_any_cast& e) 
				{
					LOG_ERROR("Bad SVReturn cast %s.", e.what());
				}
				return rv;
			}

		private:
			SVReturn(std::any value) : value(value) {  }
			SVReturn() {  }

			template<typename T>
			SVReturn& operator=(T&& val)
			{
				value = val;
				return *this;
			}

		private:
	#pragma warning( push )
#pragma warning( disable : 4251 )
			std::any value;
#pragma warning( pop )
		};
	};
}
